name: CI Pipeline

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 21
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '21'

    - name: Cache Maven dependencies
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('./pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven

    - name: Build the project
      id: build_project
      run: |
        mvn clean package -B -V
        mv target/*.jar target/release-${{ github.run_id }}.jar

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 21
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '21'

    - name: Cache Maven dependencies
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('./pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven

    - name: Run tests
      run: mvn clean test

  release:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' # Solo genera una release en la rama principal

    steps:
    - uses: actions/checkout@v2

    - name: Get the latest release
      id: get_release
      uses: actions/github-script@v6
      with:
        script: |
          const latestRelease = await github.rest.repos.getLatestRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
          }).catch(() => null); // Maneja casos sin releases previas
          
          if (latestRelease) {
            const versionParts = latestRelease.data.tag_name.split('.');
            versionParts[versionParts.length - 1] = (parseInt(versionParts[versionParts.length - 1]) + 1).toString();
            return versionParts.join('.');
          } else {
            return '1.0'; // Versi√≥n inicial si no hay releases previas
          }
        result-encoding: string
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_release.outputs.result }}
        release_name: Release ${{ steps.get_release.outputs.result }}
        body: |
          This release was generated automatically by the CI pipeline.
        draft: false
        prerelease: false

    - name: Upload Artifact
      if: ${{ steps.create_release.outputs.upload_url != null }}
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/release-${{ steps.get_release.outputs.result }}.jar
        asset_name: release-${{ steps.get_release.outputs.result }}.jar
        asset_content_type: application/java-archive
